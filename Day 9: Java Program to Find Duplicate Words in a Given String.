
ðŸ“Œ In order to find duplicate words, we first need to split the sentence into words. For that use split() method from String Class, this will return array of strings.
ðŸ“Œ After getting the list of words, we going to store them in a map as <words, occurrence count>.
ðŸ“Œ The map.entrySet() method in Java is used to create a set out of the same elements contained in the map.
ðŸ“Œ By iterating the set, we check the value of entry is greater than 1. If it is true, we put the words and count in a map.

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

public class DuplicateWordsInString {
public static void main(String[] args) {
String input="The more you give, the more you get";
HashMap<String, Integer> result=findDuplicateWords(input);
System.out.println(result);
}

public static HashMap<String, Integer> findDuplicateWords(String s) {
String str=s.toLowerCase();
if(str == null || str.isEmpty()){
throw new IllegalArgumentException("String cannot be null or empty");
}
//LinkedHashMap<String, Integer> map = new LinkedHashMap<>();  
/*** LinkedHashMap(LHM) consumes more memory than Hashmap due to internal implementation of DoubleLinkedList 
Hashmap wont consume much memory compared to LHM 
We can use LHM if insertion order is required **/
 HashMap<String, Integer> map = new HashMap<>();
String[] strArray = str.split(" ");
for (String string :
strArray) {
if (map.containsKey(string)) {
map.put(string, map.get(string) + 1);
} else {
map.put(string, 1);
}
}
Set<Map.Entry<String, Integer>> set = map.entrySet();
System.out.println("Duplicate characters in a string " + str + ":");
HashMap<String, Integer> duplicate = new HashMap<>();
for (Map.Entry<String, Integer> entry : set) {
if (entry.getValue() > 1) {
duplicate.put(entry.getKey(), entry.getValue());
}
}
return duplicate;
}
}
